{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"vnetName": {
			"type": "string",
			"metadata": {
				"description": "Name of the Virtual Network"
			}
		},
		"vnetAddressPrefix": {
			"type": "string",
			"metadata": {
				"description": "The IP Address pool for the virtual network in CIDR format."
			}
		},
		"nsgName": {
			"type": "string",
			"metadata": {
				"description": "Name of the Network Security Group."
			}
		},
		"securityRules.Name": {
			"type": "string",
			"metadata": {
				"description": "Name of the Security Rule."
			}
		},
		"securityRules.properties.protocol": {
			"type": "string",
			"allowedValues": [
				"TCP",
				"UDP"
			],
			"metadata": {
				"description": "Protocol of the Security Rule, select from allowed values."
			}
		},
		"securityRules.properties.sourcePortRange": {
			"type": "string",
			"metadata": {
				"description": "Source Address Range of the Security Rule, can be Internet or any exisitng network/subnets."
			}
		},
		"securityRules.properties.destinationPortRange": {
			"type": "string",
			"metadata": {
				"description": "Destination Address Range of the Security Rule, can be any existing network/subnets."
			}
		},
		"securityRules.properties.sourceAddressPrefix": {
			"type": "string",
			"metadata": {
				"description": "Destination Address Range of the Security Rule, can be any existing network/subnets."
			}
		},
		"securityRules.properties.destinationAddressPrefix": {
			"type": "string",
			"metadata": {
				"description": "The Destination IP Address pool for the NSG in CIDR format."
			}
		},
		"securityRules.properties.access": {
			"type": "string",
			"allowedValues": [
				"Allow",
				"Deny"
			],
			"metadata": {
				"description": "Access type of the NSG, either Allow or Deny traffic."
			}
		},
		"securityRules.properties.priority": {
			"type": "string",
			"metadata": {
				"description": "Priority number of the rule, preferably have the format in hundreds, eg: 100,200,300 etc."
			}
		},
		"securityRules.properties.direction": {
			"type": "string",
			"allowedValues": [
				"Inbound",
				"Outbound"
			],
			"metadata": {
				"description": "Direction allowed by the Security group for traffic flow, could be either Inbound or Outbound"
			}
		},
		"nextHopIP": {
			"type": "string",
			"metadata": {
				"description": "The next hop ip, this should be an address in the firewall subnet"
			}
		},
		"subnetName": {
			"type": "string",
			"metadata": {
				"description": "Name of the Subnet"
			}
		},
		"subnetPrefix": {
			"type": "string",
			"metadata": {
				"description": "The IP Address pool for the Subnet in CIDR format."
			}
		},
		"azfwRouteTableName": {
			"type": "string",
			"defaultvalue": "azfwRouteTable",
			"metadata": {
				"description": "Name of the Route table for external firewall connectivity."
			}
		},
		"firewallSubnetName": {
			"type": "string",
			"defaultvalue": "AzureFirewallSubnet",
			"metadata": {
				"description": "Firewall subnet name"
			}
		},
		"azureFirewallSubnetPrefix": {
			"type": "string",
			"metadata": {
				"description": "Address Prefix of the Firewall subnet, prefer to have 10.x.255.0/24 as a standard practice"
			}
		},
		"storageAccountType": {
			"type": "string",
			"defaultValue": "Standard_LRS",
			"allowedValues": [
				"Standard_LRS",
				"Standard_GRS",
				"Standard_ZRS",
				"Premium_LRS"
			],
			"metadata": {
				"description": "Type of the Storage Account, please choose from allowed values"
			}
		},
		"storageAccountName": {
			"type": "string",
			"metadata": {
				"description": "Name of the Storage Account, must be unique as it has a FQDN"
			}
		},
		"storageAccountKind": {
			"type": "string",
			"allowedValues": [
				"Storage",
				"StorageV2",
				"BlobStorage",
				"FileStorage",
				"BlockBlobStorage"
			],
			"metadata": {
				"description": "Storage Account kind"
			}
		},
		"publicIPAllocationMethod": {
			"type": "string",
			"defaultValue": "Dynamic",
			"allowedValues": [
				"Static",
				"Dynamic"
			],
			"metadata": {
				"description": "Allocation method of the Public IP Address, must be either Static or Dynamic Allocation"
			}
		},
		"lbName": {
			"type": "string",
			"metadata": {
				"description": "Name of the Load Balancer"
			}
		},
		"vmssName": {
			"type": "string",
			"metadata": {
				"description": "Name of the Load Balancer"
			}
		},
		"vmSku": {
			"type": "string",
			"allowedValues": [
				"Standard_D14",
				"Standard_D1_v2",
				"Standard_D2_v2",
				"Standard_D3_v2",
				"Standard_D4_v2",
				"Standard_D5_v2",
				"Standard_D11_v2",
				"Standard_D12_v2",
				"Standard_D13_v2",
				"Standard_D14_v2",
				"Standard_M8-2ms"
			],
			"defaultValue": "Standard_A1",
			"metadata": {
				"description": "App VM size to provision. See https://docs.microsoft.com/en-us/azure/cloud-services/cloud-services-sizes-specs"
			}
		},
		"instanceCount": {
			"type": "int",
			"metadata": {
				"description": "Number of VM instances (100 or less)."
			},
			"defaultValue": 2,
			"maxValue": 100
		},
		"adminUsername": {
			"type": "string",
			"metadata": {
				"description": "Admin username on all VMs."
			}
		},
		"adminPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Admin password on all VMs."
			}
		},
		"imageReference.publisher": {
			"type": "string",
			"metadata": {
				"description": "Name of the image publisher"
			}
		},
		"imageReference.offer": {
			"type": "string",
			"metadata": {
				"description": "Version of the image"
			}
		},
		"imageReference.sku": {
			"type": "string",
			"metadata": {
				"description": "Sku of the image specified"
			}
		},
		"imageReference.version": {
			"type": "string",
			"defaultValue": "latest",
			"metadata": {
				"description": "Version of the image"
			}
		},
		"capacity.minimum": {
			"type": "int",
			"metadata": {
				"description": "Minimum number of VMs in the Scale Set"
			}
		},
		"capacity.maximum": {
			"type": "int",
			"metadata": {
				"description": "Maximum number of VMs in the Scale Set"
			}
		},
		"capacity.default": {
			"type": "int",
			"metadata": {
				"description": "Default number of VMs in the Scale Set"
			}
		},
		"metricTrigger.increaseThreshold": {
			"type": "int",
			"metadata": {
				"description": "Threshold value for metric before adding an instance"
			}
		},
		"metricTrigger.decreaseThreshold": {
			"type": "int",
			"metadata": {
				"description": "Threshold value for metric"
			}
		},
		"workspaceId": {
			"type": "string",
			"defaultValue": "558b56b2-cdfe-47f8-a2d3-0b1dfcf2bcba",
			"metadata": {
				"description": "Workspace ID of the OMS workspace"
			}
		},
		"workspaceKey": {
			"type": "string",
			"metadata": {
				"description": "Workspace key of the OMS workspace, will be referenced from keyvault"
			}
		},
		"diskSkuName": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "The sku Name of the Data Disk"
            }
        },
        "diskSizeGB": {
            "type": "int",
            "deafultValue": 1023,
            "metadata": {
                "description": "The sku Name of the Data Disk"
            }
        }
	},
	"variables": {
		"templateBaseUrl": "https://raw.githubusercontent.com/rangerlynch7/DemoARMTemplate/master/",
		"virtualNetworkTemplateUrl": "[concat(variables('templateBaseUrl'), 'VirtualNetwork.json')]",
		"nsgTemplateUrl": "[concat(variables('templateBaseUrl'), 'NetworkSecurityGroup.json')]",
		"routeTableTemplateUrl": "[concat(variables('templateBaseUrl'), 'RouteTable.json')]",
		"subnetTemplateUrl": "[concat(variables('templateBaseUrl'), 'Subnet.json')]",
		"firewallSubnetTemplateUrl": "[concat(variables('templateBaseUrl'), 'FirewallSubnet.json')]",
		"azFirewallTemplateUrl": "[concat(variables('templateBaseUrl'), 'AzureFirewall.json')]",
		"storageAccountTemplateUrl": "[concat(variables('templateBaseUrl'), 'StorageAccount.json')]",
		"publicIPTemplateUrl": "[concat(variables('templateBaseUrl'), 'PublicIP.json')]",
		"lbTemplateUrl": "[concat(variables('templateBaseUrl'), 'LoadBalancer.json')]",
		"vmssTemplateUrl": "[concat(variables('templateBaseUrl'), 'Vmss.json')]",
		"nicTemplateUrl": "[concat(variables('templateBaseUrl'), 'NetworkInterface.json')]",
		"autoscaleTemplateUrl": "[concat(variables('templateBaseUrl'), 'AutoScale.json')]",
		"logAnalyticsExtensionforLinux": "[concat(variables('templateBaseUrl'), 'LogAnalyticsExtensionforLinux.json')]",
		"dataDiskTemplateUrl":"[concat(variables('templateBaseUrl'), 'DataDisk.json')]"
	},
	"resources": [
		{
			"apiVersion": "2017-05-10",
			"name": "DataDiskDeploymentTemplate",
			"type": "Microsoft.Resources/deployments",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('dataDiskTemplateUrl')]"
				},
				"parameters": {
					"vmssName": {
						"value": "[parameters('vmssName')]"
					},
					"diskSkuName": {
						"value": "[parameters('diskSkuName')]"
					},
					"diskSizeGB": {
						"value": "[parameters('diskSizeGB')]"
					}
				}
			},
			"dependsOn": [
				"VmssDeployment"
			]
		}
	]
}